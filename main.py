# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y49Eies3bYxhMfkGdyQL5Sd5nIKrKwlF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.stem import WordNetLemmatizer
from nltk import pos_tag
from gensim.models import Word2Vec

df = pd.read_csv("/content/drive/MyDrive/megaGymDataset.csv")

df.head()

nltk.download('punkt')

nltk.download('averaged_perceptron_tagger')

nltk.download('wordnet')

df['Title_processed'] = df['Title'].apply(preprocess)
df['BodyPart_processed'] = df['BodyPart'].apply(preprocess)
df['Equipment_processed'] = df['Equipment'].apply(preprocess)
df['Level_processed'] = df['Level'].apply(preprocess)

# define the TfidfVectorizer for each column
title_tfidf_vectorizer = TfidfVectorizer()
bodypart_tfidf_vectorizer = TfidfVectorizer()
equipment_tfidf_vectorizer = TfidfVectorizer()
level_tfidf_vectorizer = TfidfVectorizer()

# fit and transform each column's text separately
title_tfidf = title_tfidf_vectorizer.fit_transform(df['Title_processed'])
bodypart_tfidf = bodypart_tfidf_vectorizer.fit_transform(df['BodyPart_processed'])
equipment_tfidf = equipment_tfidf_vectorizer.fit_transform(df['Equipment_processed'])
level_tfidf = level_tfidf_vectorizer.fit_transform(df['Level_processed'])

def get_exercise_recommendations(input_text):
  input_text_processed = preprocess(input_text)
  print(input_text_processed)

  # transform the input text using each column's TfidfVectorizer
  input_title_tfidf = title_tfidf_vectorizer.transform([input_text_processed])
  input_bodypart_tfidf = bodypart_tfidf_vectorizer.transform([input_text_processed])
  input_equipment_tfidf = equipment_tfidf_vectorizer.transform([input_text_processed])
  input_level_tfidf = level_tfidf_vectorizer.transform([input_text_processed])

  # calculate cosine similarity between input text and each column's tf-idf matrix
  title_similarity = cosine_similarity(input_title_tfidf, title_tfidf)
  bodypart_similarity = cosine_similarity(input_bodypart_tfidf, bodypart_tfidf)
  equipment_similarity = cosine_similarity(input_equipment_tfidf, equipment_tfidf)
  level_similarity = cosine_similarity(input_level_tfidf, level_tfidf)

  title_similarity_scores = list(enumerate(title_similarity[0]))
  title_similarity_scores_sorted = sorted(title_similarity_scores, key=lambda x: x[1], reverse=True)

  bodypart_similarity_scores = list(enumerate(bodypart_similarity[0]))
  bodypart_similarity_scores_sorted = sorted(bodypart_similarity_scores, key=lambda x: x[1], reverse=True)

  equipment_similarity_scores = list(enumerate(equipment_similarity[0]))
  equipment_similarity_scores_sorted = sorted(equipment_similarity_scores, key=lambda x: x[1], reverse=True)

  level_similarity_scores = list(enumerate(level_similarity[0]))
  level_similarity_scores_sorted = sorted(level_similarity_scores, key=lambda x: x[1], reverse=True)

  # create a dictionary to store the similarity scores
  similarity_dict = {}

  # loop through the sorted arrays and add up the similarity scores for each exercise title
  for i in range(len(title_similarity_scores_sorted)):
      title_index = title_similarity_scores_sorted[i][0]
      bodypart_score = bodypart_similarity_scores[title_index][1]
      equipment_score = equipment_similarity_scores[title_index][1]
      level_score = level_similarity_scores[title_index][1]
      total_score = title_similarity_scores_sorted[i][1] + bodypart_score + equipment_score + level_score
      similarity_dict[df.loc[title_index, 'Title']] = total_score

  # sort the dictionary in descending order by value
  similarity_dict = dict(sorted(similarity_dict.items(), key=lambda item: item[1], reverse=True))

  # get the exercise title with the highest score
  exercise_title = list(similarity_dict.keys())[:10]
  return exercise_title

def start_chatbot():
    while True:
        # prompt the user for input
        input_text = input('How can I help you? ')
        # check if the user wants to quit
        if input_text.lower() in ['quit', 'exit', 'bye']:
            break
        # get exercise recommendations based on user input
        exercise_titles = get_exercise_recommendations(input_text)
        # print the exercise recommendations
        print('\nExercise Recommendations:')
        for i in range(len(exercise_titles)):
            print(f'{i+1}. {exercise_titles[i]}')
        print()

# start the chatbot
start_chatbot()









